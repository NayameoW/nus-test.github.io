[{"authors":null,"categories":null,"content":"Find more information about Manuel at https://www.manuelrigger.at/.\n","date":1702598400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1702598400,"objectID":"df434bd364d7b454c8d30090a4ec6702","permalink":"https://nus-test.github.io/author/manuel-rigger/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/manuel-rigger/","section":"authors","summary":"Find more information about Manuel at https://www.manuelrigger.at/.","tags":null,"title":"Manuel Rigger","type":"authors"},{"authors":null,"categories":null,"content":"Shuxin Li is an undergraduate student from Southern University of Science and Technology. She is doing internship at the lab for half a year.\n","date":1702598400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1702598400,"objectID":"296f0441b1fcbd3334c116a0d74acb80","permalink":"https://nus-test.github.io/author/shuxin-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/shuxin-li/","section":"authors","summary":"Shuxin Li is an undergraduate student from Southern University of Science and Technology. She is doing internship at the lab for half a year.","tags":null,"title":"Shuxin Li","type":"authors"},{"authors":null,"categories":null,"content":"Haoxiang is doing an internship at the lab for half a year.\nHe is a master student supervised by Prof. Ming Wen at Huazhong University of Science and Technology.\n","date":1701093600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1701093600,"objectID":"a0eec30d1fdaf48de1dc755f8ee14118","permalink":"https://nus-test.github.io/author/haoxiang-jia/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/haoxiang-jia/","section":"authors","summary":"Haoxiang is doing an internship at the lab for half a year.\nHe is a master student supervised by Prof. Ming Wen at Huazhong University of Science and Technology.","tags":null,"title":"Haoxiang Jia","type":"authors"},{"authors":null,"categories":null,"content":"Lyu Jun. He is currently a third-year Ph.D. student in the DevOps+ Research Laboratory (https://softeng.nju.edu.cn/), supervised by Prof. He (Jason) Zhang (https://softeng.nju.edu.cn/faculty/HeZhang/index.html), at Nanjing University, China. He research interests focus on improving software build efficiency and quality in practice, and reducing CI computing costs.\n","date":1700488800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1700488800,"objectID":"7d728c3c60fa84952d88c3beaae4c199","permalink":"https://nus-test.github.io/author/jun-lyu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jun-lyu/","section":"authors","summary":"Lyu Jun. He is currently a third-year Ph.D. student in the DevOps+ Research Laboratory (https://softeng.nju.edu.cn/), supervised by Prof. He (Jason) Zhang (https://softeng.nju.edu.cn/faculty/HeZhang/index.html), at Nanjing University, China. He research interests focus on improving software build efficiency and quality in practice, and reducing CI computing costs.","tags":null,"title":"Jun Lyu","type":"authors"},{"authors":null,"categories":null,"content":"Anxing graduated from the David R. Cheriton School of Computer Science at University of Waterloo, previously employed at CashApp. She joined NUS as a Master student in January 2022.\n","date":1699275600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1699275600,"objectID":"d6f458f7875249e73a1a10f28d530983","permalink":"https://nus-test.github.io/author/anxing-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/anxing-zhang/","section":"authors","summary":"Anxing graduated from the David R. Cheriton School of Computer Science at University of Waterloo, previously employed at CashApp. She joined NUS as a Master student in January 2022.","tags":null,"title":"Anxing Zhang","type":"authors"},{"authors":null,"categories":null,"content":"Suyang joined NUS as a Ph.D. student in Fall 2022. He was an undergraduate in the School of Computer Science and Technology at University of Science and Technology of China (USTC).\nFind more information about Suyang at https://suyang.zone/.\n","date":1698069600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1698069600,"objectID":"1d9952094438a20b2daaca50dec101b8","permalink":"https://nus-test.github.io/author/suyang-zhong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/suyang-zhong/","section":"authors","summary":"Suyang joined NUS as a Ph.D. student in Fall 2022. He was an undergraduate in the School of Computer Science and Technology at University of Science and Technology of China (USTC).","tags":null,"title":"Suyang Zhong","type":"authors"},{"authors":null,"categories":null,"content":"Find more information about Jinsheng.\n","date":1696896000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1696896000,"objectID":"cb5153d2f004382e7696d29ab119ed9b","permalink":"https://nus-test.github.io/author/jinsheng-ba/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jinsheng-ba/","section":"authors","summary":"Find more information about Jinsheng.","tags":null,"title":"Jinsheng Ba","type":"authors"},{"authors":null,"categories":null,"content":"Wenjing is doing an internship at the lab for half a year.\nShe is a master student supervised by Prof. Geguang Pu and Dr. Chengyu Zhang at Trusted Intelligent Software Engineering Lab at East China Normal University.\nShe received B.S. degree from the School of Psychology and Cognitive Science at East China Normal University in 2021.\nFind more information about Wenjing.\n","date":1696860000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1696860000,"objectID":"b841a19ac2a3226a248fe69a626068d4","permalink":"https://nus-test.github.io/author/wenjing-deng/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/wenjing-deng/","section":"authors","summary":"Wenjing is doing an internship at the lab for half a year.\nShe is a master student supervised by Prof. Geguang Pu and Dr. Chengyu Zhang at Trusted Intelligent Software Engineering Lab at East China Normal University.","tags":null,"title":"Wenjing Deng","type":"authors"},{"authors":null,"categories":null,"content":"Qiuyang Mang is doing an internship at the lab for half a year. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.\nFind more information about Qiuyang.\n","date":1696255200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1696255200,"objectID":"1e6440f6bfb0b8db4695859c42c99744","permalink":"https://nus-test.github.io/author/qiuyang-mang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/qiuyang-mang/","section":"authors","summary":"Qiuyang Mang is doing an internship at the lab for half a year. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.","tags":null,"title":"Qiuyang Mang","type":"authors"},{"authors":null,"categories":null,"content":"Find Chi Zhang\u0026rsquo;s homepage at https://ch1zhang.github.io/.\n","date":1694440800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1694440800,"objectID":"31a4e8cb1b1884f9fdeae84ccbfb0cf2","permalink":"https://nus-test.github.io/author/chi-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/chi-zhang/","section":"authors","summary":"Find Chi Zhang\u0026rsquo;s homepage at https://ch1zhang.github.io/.","tags":null,"title":"Chi Zhang","type":"authors"},{"authors":["hhkit"],"categories":null,"content":"Ivan is a final year Masters Stduent working on software reliability, program analysis and compilers. Once upon a time, he used to make games as well.\n","date":1693836000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1693836000,"objectID":"8bf820977b8668cbe19bc7cde74d056b","permalink":"https://nus-test.github.io/author/ivan-ho/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/ivan-ho/","section":"authors","summary":"Ivan is a final year Masters Stduent working on software reliability, program analysis and compilers. Once upon a time, he used to make games as well.","tags":null,"title":"Ivan Ho","type":"authors"},{"authors":null,"categories":null,"content":"Nishita, graduated with a Masters in Computing from NUS in July 2023. She currently holds the role of a fullstack developer at PSA, Singapore, where she is actively engaged in crafting innovative solutions that bridge the realms of frontend and backend development. Find more information about Nishita.\n","date":1681740000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1681740000,"objectID":"f8f5d3453d4db89427c9d153cad50200","permalink":"https://nus-test.github.io/author/nishita-dutta/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nishita-dutta/","section":"authors","summary":"Nishita, graduated with a Masters in Computing from NUS in July 2023. She currently holds the role of a fullstack developer at PSA, Singapore, where she is actively engaged in crafting innovative solutions that bridge the realms of frontend and backend development.","tags":null,"title":"Nishita Dutta","type":"authors"},{"authors":null,"categories":null,"content":"Jovyn is a final year undergraduate at the National University of Singapore working on automated testing for TeX engines.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"7ff74d2547225effdbbda92f8aee790f","permalink":"https://nus-test.github.io/author/jovyn-tan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jovyn-tan/","section":"authors","summary":"Jovyn is a final year undergraduate at the National University of Singapore working on automated testing for TeX engines.","tags":null,"title":"Jovyn Tan","type":"authors"},{"authors":null,"categories":null,"content":"Nathee Jaywaree is an undergraduate student from King Mongkutâ€™s University of Technology Thonburi. He was doing an internship at the lab for 2.5 months (May 2023 to August 2023).\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"4cadc412f4485dbf8a0504b3235291ec","permalink":"https://nus-test.github.io/author/nathee-jaywaree/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nathee-jaywaree/","section":"authors","summary":"Nathee Jaywaree is an undergraduate student from King Mongkutâ€™s University of Technology Thonburi. He was doing an internship at the lab for 2.5 months (May 2023 to August 2023).","tags":null,"title":"Nathee Jaywaree","type":"authors"},{"authors":null,"categories":null,"content":"Qingshuo Guo is doing an internship at the lab for one semester. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"5721dd47c08515b1889dc3b79d23ba3a","permalink":"https://nus-test.github.io/author/qingshuo-guo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/qingshuo-guo/","section":"authors","summary":"Qingshuo Guo is doing an internship at the lab for one semester. Prior to this, He was a research assistant supervised by Prof. Pinjia He at Intelligent Software Engineering Lab of CUHK-SZ.","tags":null,"title":"Qingshuo Guo","type":"authors"},{"authors":null,"categories":null,"content":"Find Tongjun Zhang\u0026rsquo;s homepage at https://github.com/albertZhangTJ.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"5bf7f13440859b32bf0463bbdc144d9c","permalink":"https://nus-test.github.io/author/tongjun-zhang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tongjun-zhang/","section":"authors","summary":"Find Tongjun Zhang\u0026rsquo;s homepage at https://github.com/albertZhangTJ.","tags":null,"title":"Tongjun Zhang","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"c281f27e38e2d9e34463132c845dda7c","permalink":"https://nus-test.github.io/author/wong-kok-rui/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/wong-kok-rui/","section":"authors","summary":"","tags":null,"title":"Wong Kok Rui","type":"authors"},{"authors":null,"categories":null,"content":"Database Management Systems (94 bugs) CockroachDB (25 bugs) sql: support SCRUB on temp tables Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83770 Found by: bajinsheng Internal Error: Comparison Overload not Found Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83792 Found by: bajinsheng ERROR: no builtin aggregate for SUM_INT on [unknown] Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83874 Found by: bajinsheng Crashing by EXPLAIN Statement Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83965 Found by: bajinsheng Invalid Memory Address Error of Specific SQL Query Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83973 Found by: bajinsheng Unexpected Error of Unique Index Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83976 Found by: bajinsheng Crash: panic: RecordingStructured has 30 recordings; expected 1 Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/84056 Found by: bajinsheng Unexpected Overflow Error by Huge Interval Value Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/84154 Found by: bajinsheng Inconsistent Case Return Types Decimal Int Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85356 Found by: bajinsheng No Result Returned by SHOW COLUMN Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85388 Found by: bajinsheng internal error: no volatility for cast decimal::timestamp Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85389 Found by: bajinsheng opt: internal error: lookup for ComparisonExpr Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85390 Found by: bajinsheng opt: internal error: no output column equivalent to 2 Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85393 Found by: bajinsheng Unexpected Error in SHOW COLUMNS Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85394 Found by: bajinsheng opt: internal error: estimated row count must be non-zero Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85499 Found by: bajinsheng Unexpected Result by UNION Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/85502 Found by: bajinsheng An Unexpected Error in `CROSS MERGE JOIN` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88104 Found by: bajinsheng ERROR: internal error: expected *DInt, found tree.dNull Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/94264 Found by: bajinsheng An Unexpected Error in `CROSS MERGE JOIN` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88104 Found by: bajinsheng Potential Issue for Estimated Rows Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/88455 Found by: bajinsheng An Issue of Estimated Rows Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/89161 Found by: bajinsheng Unexpected Estimated Rows in `HAVING` clause Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/89462 Found by: bajinsheng Suspicious Estimated Rows by `OR` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/90112 Found by: bajinsheng Suspicious Estimated Rows by `DISTINCT` Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/90113 Found by: bajinsheng ERROR: internal error: expected *DInt, found tree.dNull Status: unconfirmed\nLink: https://github.com/cockroachdb/cockroach/issues/94264 Found by: bajinsheng DuckDB (3 bugs) BETWEEN with subquery and column results in unexpected error Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/3588 Found by: kokrui Unexpected Error for RTRIM Function in Where Clause Status: fixed\nLink: https://github.com/duckdb/duckdb/issues/3616 Found by: kokrui Crash When Creating Index Status: unconfirmed\nLink: https://github.com/duckdb/duckdb/issues/4976 Found by: bajinsheng MySQL (4 bugs) Suspicious Estimated Rows Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108833 Found by: bajinsheng Suspicious Estimated Rows by JOIN Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108851 Found by: bajinsheng Suspicious Estimated Rows by DISTINCTROW Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=108852 Found by: bajinsheng Unexpected Error: Memory capacity exceeded Status: unconfirmed\nLink: https://bugs.mysql.com/bug.php?id=111471 Found by: bajinsheng SQLite (28 bugs) An Inconsistent Result Depending on Parenthesization Status: fixed\nLink: https://sqlite.org/forum/forumpost/af3d07f908 Found by: bajinsheng An Unexpected NULL Column Caused by Where Clause in RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/41cc3851d8 Found by: bajinsheng Rows are Unexpectedly Filtered Out by DISTINCT in RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/c06b10ad7e Found by: bajinsheng Expression or Constant in GroupBy Clause Status: fixed\nLink: https://sqlite.org/forum/forumpost/2458c5dea2 Found by: bajinsheng Ambiguous Reference Error for Right Join Status: confirmed\nLink: https://sqlite.org/forum/forumpost/e90a8e6e6f Found by: bajinsheng Unexpected Result by WHERE when Joining Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/687b0bf563 Found by: bajinsheng Unexpected Result by WHERE/RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/5cfe08eed6 Found by: bajinsheng Unexpected Result in Joining Virtual Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/3902c7b833 Found by: bajinsheng Unexpected Result by Joining Status: fixed\nLink: https://sqlite.org/forum/forumpost/c2554d560b Found by: bajinsheng Unexpected Result by RIGHT JOIN on RTree Tables Status: fixed\nLink: https://sqlite.org/forum/forumpost/087de2d9ec Found by: bajinsheng Unexpected Result by WHERE Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/de16c4abe2 Found by: bajinsheng Unexpected Result by RIGHT JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/206d99a16d Found by: bajinsheng Unexpected Assertion Error in SQLite3MemCompare Status: fixed\nLink: https://sqlite.org/forum/forumpost/800eecf5e6 Found by: bajinsheng Unexpected Result by ORDER BY Status: fixed\nLink: https://sqlite.org/forum/forumpost/323f86cc30 Found by: bajinsheng Unexpected Result by RIGHT JOIN with INDEX Status: fixed\nLink: https://sqlite.org/forum/forumpost/c4676c4956 Found by: bajinsheng Unexpected Result by JSON Status: fixed\nLink: https://sqlite.org/forum/forumpost/3d9caa45cb Found by: bajinsheng Unexpected Result by Complicated JOINING Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/eeb8173cf8 Found by: bajinsheng Assertion `pCur-\u003eeCurType==CURTYPE_VTAB' failed Status: fixed\nLink: https://sqlite.org/forum/forumpost/dafe0500b0 Found by: bajinsheng Unexpected Result by RIGHT JOIN Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/51e6959f61 Found by: bajinsheng Unexpected Result by Complicated JOINING Again Status: fixed\nLink: https://sqlite.org/forum/forumpost/b40696f501 Found by: bajinsheng Unexpected Assertion Error in valueFromFunction Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/e3243e07e8 Found by: bajinsheng Unexpected Result by FULL OUTER JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/5610c17c3d Found by: bajinsheng Unexpected Expression on ON clause Status: fixed\nLink: https://sqlite.org/forum/forumpost/57bdf2217d Found by: bajinsheng Unexpected Expression Result by FULL OUTER JOIN Status: fixed\nLink: https://sqlite.org/forum/forumpost/6650cd40b5 Found by: bajinsheng Unexpected Parse Error Status: fixed\nLink: https://sqlite.org/forum/forumpost/1a7fea4651 Found by: bajinsheng Unexpected Assertion Error in whereRangeScanEst Status: fixed\nLink: https://sqlite.org/forum/forumpost/c3496cf6b1 Found by: bajinsheng Unexpected Result by Union Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/174afeae57 Found by: bajinsheng Assertion `pRec-\u003enField\u003e0 \u0026\u0026 pRec-\u003enField\u0026lt;=pIdx-\u003enSampleCol' failed. Status: unconfirmed\nLink: https://sqlite.org/forum/forumpost/3607259d3c Found by: bajinsheng TiDB (34 bugs) incorrect unresolved column when using natural join Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35522 Found by: bajinsheng unexpected unresolved column error when the view refers to dual table Status: fixed\nLink: https://github.com/pingcap/tidb/issues/35527 Found by: bajinsheng Runtime error: invalid memory address Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35623 Found by: bajinsheng Unexpected Result with a FALSE Expression in WHERE Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35645 Found by: bajinsheng Unexpected Error by CAST and CHAR functions Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35652 Found by: bajinsheng Unexpected Error for Function INET_ATON Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35677 Found by: bajinsheng Unexpected Connection Lost Status: confirmed\nLink: https://github.com/pingcap/tidb/issues/35678 Found by: bajinsheng Inconsistent Results in SELECT Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/36853 Found by: bajinsheng Unexpected Result by CONCAT_WS Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/36888 Found by: bajinsheng ERROR 8141 (HY000): assertion failed Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38295 Found by: bajinsheng Incorrect Results by `REGEXP` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38303 Found by: bajinsheng Incorrect Result by `LEFT JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38304 Found by: bajinsheng runtime error: invalid memory address or nil pointer dereference Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38305 Found by: bajinsheng Unexpected Results Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38310 Found by: bajinsheng Error [types:1690]%s value is out of range in '%s' Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38352 Found by: bajinsheng Unexpected Error: Failed to read auto-increment value from storage engine Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38483 Found by: bajinsheng Unexpected Results by RIGHT JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38654 Found by: bajinsheng rule PredicatePushDown pushes wrong filter across projection Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38736 Found by: bajinsheng ERROR 8141 (HY000): assertion failed Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38295 Found by: bajinsheng Incorrect Results by `REGEXP` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38303 Found by: bajinsheng Incorrect Result by `LEFT JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38304 Found by: bajinsheng runtime error: invalid memory address or nil pointer dereference Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38305 Found by: bajinsheng Unexpected Results Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38310 Found by: bajinsheng Unexpected Estimated Rows of `OR` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38319 Found by: bajinsheng Error [types:1690]%s value is out of range in '%s' Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38352 Found by: bajinsheng Question About the Estimated Rows in `GROUP BY` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38474 Found by: bajinsheng Suspicious Estimated Rows by `JOIN` Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38479 Found by: bajinsheng Suspicious Estimated Rows by HAVING Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38482 Found by: bajinsheng Unexpected Error: Failed to read auto-increment value from storage engine Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38483 Found by: bajinsheng Unexpected Results by RIGHT JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38654 Found by: bajinsheng Unexpected Estimated Rows by INNER JOIN Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38665 Found by: bajinsheng Unexpected Estimated Rows by WHERE clause Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38721 Found by: bajinsheng rule PredicatePushDown pushes wrong filter across projection Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/38736 Found by: bajinsheng runtime error: index out of range [7] with length 4 Status: unconfirmed\nLink: https://github.com/pingcap/tidb/issues/44747 Found by: bajinsheng ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2a88633f88eb64900a842ab68da75d43","permalink":"https://nus-test.github.io/bugs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/bugs/","section":"","summary":"Database Management Systems (94 bugs) CockroachDB (25 bugs) sql: support SCRUB on temp tables Status: confirmed\nLink: https://github.com/cockroachdb/cockroach/issues/83770 Found by: bajinsheng Internal Error: Comparison Overload not Found Status: confirmed\nLink: https://github.","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"I am looking for PhD students, postdocs, interns, and visitors whose vision aligns with ours to join our lab. In general, we aim to both have a practical impact by creating relevant and usable tools as well as by designing principled and fundamental approaches.\nThe group\u0026rsquo;s core areas are software engineering, computer systems, and programming languages. Topics of interest include, but are not limited to:\nSoftware reliability using techniques such as automated testing and program analysis Creating and improving essential systems such as compilers, programming language environments, and data processing systems Programming languages, in particular, their efficient implementation You can also consult my Google Scholar page for an up-to-date view of our research activities.\nAn ideal candidate has some of the following qualities:\nStrong implementation skills and a desire to create open-source tools The ability to come up with ideas and develop new approaches Not being afraid to tackle challenging, important problems The resilience to deal with fallbacks (which are quite common in research) and maintaining a work-life balance An interest in working on improving technical and non-technical skills A desire to write papers and publish at top venues (ICSE, ASPLOS, OOPSLA, \u0026hellip;) A motivation to share your work with the community (through presentations, talking to your peers, on your website, \u0026hellip;) An interest to learn about what other people are working on (e.g., by reading papers) It is not expected that you have all of these qualities; I am unsure whether I have all of them myself. However, keep in consideration that these qualities reflect ways in which you will likely be challenged and develop further if you decide to join the lab.\nIf you are interested in a position, feel free to reach out to me and send me your CV. If you are considering a PhD position, you can also directly apply here and mention my name in the application. The application deadlines are June 15 and December 15.\n\u0026ndash; Manuel RIGGER (rigger@comp.nus.edu.sg)\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e2e00e66991b80529ffa9cff1c2bed24","permalink":"https://nus-test.github.io/positions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/positions/","section":"","summary":"I am looking for PhD students, postdocs, interns, and visitors whose vision aligns with ours to join our lab. In general, we aim to both have a practical impact by creating relevant and usable tools as well as by designing principled and fundamental approaches.","tags":null,"title":"Open Positions","type":"page"},{"authors":["Jie Liang"],"categories":null,"content":"","date":1702908000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702908000,"objectID":"cf1fd3165f8d8b3c6ce2b48a0d24f757","permalink":"https://nus-test.github.io/event/231218/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231218/","section":"event","summary":" Testing database management systems (DBMSs) is a complex task. The vagueness and intricacy of the SQL specification make it difficult to model the semantics of queries, making it challenging to test the correctness and performance of DBMSs. Traditional approaches, such as metamorphic testing, require precise modeling of the SQL specification to create different inputs with equivalent semantics. This process can be labor-intensive and error-prone. To address this, we propose Mozi, a framework that finds DBMS bugs via configuration-based equivalent transformation. The key idea behind Mozi is to compare the results of equivalent DBMSs with different configurations, rather than between semantically equivalent queries. The framework involves analyzing the query plan, changing configurations to transform the DBMS to an equivalent one, and re-executing the query to compare the results using various test oracles. For example, detecting differences in query results indicates correctness bugs, while observing faster execution times on the optimization-closed DBMS suggests performance bugs. We demonstrate the effectiveness of Mozi by evaluating it on four widely used DBMSs, namely MySQL, MariaDB, Clickhouse, and PostgreSQL. In the continuous fuzzing, Mozi totally found 101 previously unknown bugs, including 49 correctness and 52 performance bugs in four DBMSs. Among them, 90 bugs are confirmed and 57 bugs have been fixed. In addition, Mozi can be extended to other DBMS fuzzers for testing various types of bugs. With Mozi, testing DBMSs becomes simpler and more effective, potentially saving time and effort that would otherwise be spent on precisely modeling SQL specifications for testing purposes.\n\n Bio: Jie Liang received the B.S. degree in computer science from Beijing University of Posts and Telecommunications, Beijing, China, in 2017, and the Ph.D. degree in software engineering from Tsinghua University, Beijing, China, in 2022. He is currently working as a Postdoc researcher in school of software at Tsinghua University. His research interests include program analysis, DBMS testing, and their applications to industry. ","tags":["Weekly Talk"],"title":"Mozi: Discovering DBMS Bugs via Configuration-Based Equivalent Transformation","type":"event"},{"authors":["Shuxin Li","Manuel Rigger"],"categories":null,"content":"","date":1702598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702598400,"objectID":"3b1eb896a2ec5379c3c34b57d4d87d1f","permalink":"https://nus-test.github.io/publication/2024-icse-xml-testing/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/publication/2024-icse-xml-testing/","section":"publication","summary":"","tags":null,"title":"Finding XPath Bugs in XML Document Processors via Differential Testing","type":"publication"},{"authors":null,"categories":null,"content":"","date":1702598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1702598400,"objectID":"ee5204e7b39907f896001606860052f8","permalink":"https://nus-test.github.io/post/15-12-23-icse24-xml-testing/","publishdate":"2023-12-15T00:00:00Z","relpermalink":"/post/15-12-23-icse24-xml-testing/","section":"post","summary":"","tags":null,"title":"Our paper \"Finding XPath Bugs in XML Document Processors via Differential Testing\" was accepted at ICSE '24!","type":"post"},{"authors":["Chuannan Zhang"],"categories":null,"content":"","date":1701698400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701698400,"objectID":"be4c87ca4e9a1f4d7f7606e1cc49d63d","permalink":"https://nus-test.github.io/event/231204/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231204/","section":"event","summary":" Change Data Capture (CDC) tools play a pivotal role in tracking and managing alterations to databases. Most of them become crucial components in the realm of data management,providing a systematic approach to identify and capture changes made to data over and across databases. However, the correctness of CDC tools is not guaranteed like DBMS, and the bugs in CDC tools may lead to severe consequences. Existing techniques such as fuzzing and differential testing are generally used to test DBMS. Approaches to find logic bugs, such as when a DBMS computes an incorrect result set, lead to automatically generate tools like SQLancer. SQLancer has been used to find bugs in a range of widely-used, production-quality DBMS including SQLite, MySQL, PostgreSQL. However, these techniques are not well used in finding bugs inside CDC tools. The key conceptual challenge was to tackle the test oracle and test-case generation problems together with heterogeneous databases connected by CDC tools. In this talk, I will introduce the study of testing CDC tools via SQLancer-CDC, a tool for automatic testing of database management systems together with change data capture tool chain. The primary findings of this tool show two schema mismatch error messages within the MySQL and Flink CDC tool.","tags":["Weekly Talk"],"title":"Testing Change Data Capture Tools via SQLancer-CDC","type":"event"},{"authors":["Haoxiang Jia"],"categories":null,"content":"","date":1701093600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701093600,"objectID":"9413223f70bac996c16c90bb75663ad1","permalink":"https://nus-test.github.io/event/231127/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231127/","section":"event","summary":" Fuzzing of compilers and code analysers has led to a large number of bugs being found and fixed in widely-used frameworks such as LLVM, GCC and Frama-C. Most such fuzzing techniques have taken a blackbox approach, with compilers and code analysers starting to become relatively immune to such fuzzers. We propose a coverage-directed, mutation-based approach for fuzzing C compilers and code analysers, inspired by the success of this type of greybox fuzzing in other application domains. The main challenge of applying mutation-based fuzzing in this context is that naive mutations are likely to generate programs that do not compile. Such programs are not useful for finding deep bugs that affect optimisation, analysis, and code generation routines. We have designed a novel greybox fuzzer for C compilers and analysers by developing a new set of mutations to target common C constructs, and transforming fuzzed programs so that they produce meaningful output, allowing differential testing to be used as a test oracle, and paving the way for fuzzer-generated programs to be integrated into compiler and code analyser regression test suites. We have implemented our approach in GrayC, a new opensource LibFuzzer-based tool, and present experiments showing that it provides more coverage on the middle- and back-end stages of compilers and analysers compared to other mutation-based approaches, including Clang-Fuzzer, PolyGlot, and a technique similar to LangFuzz. We have used GrayC to identify 30 confirmed compiler and code analyser bugs: 25 previously unknown bugs (with 22 of them already fixed in response to our reports) and 5 confirmed bugs reported independently shortly before we found them. A further 3 bug reports are under investigation. Apart from the results above, we have contributed 24 simplified versions of coverage-enhancing test cases produced by GrayC to the Clang/LLVM test suite, targeting 78 previously uncovered functions in the LLVM codebase.","tags":["Weekly Talk"],"title":"GrayC: Greybox Fuzzing of Compilers and Analysers for C","type":"event"},{"authors":["Jun Lyu"],"categories":null,"content":"","date":1700488800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700488800,"objectID":"0cf2dc08ebe30a9dcd62da1d2a0475f5","permalink":"https://nus-test.github.io/event/231120/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231120/","section":"event","summary":"Complete and correct build dependencies are critical to successful builds and are often violated and ignored by practitioners using MAKE, one of the widely used build systems. Incomplete declarations of build dependencies can lead to incorrect or inefficient builds. In addition, software products provide many configurations to accommodate different environments and requirements. Building multiple configurations is a pressing need. The current common practice is to perform a clean build for each configuration, which is both expensive and time-consuming. Incremental builds have been shown to be suitable for building multiple software configurations. This means incrementally building one software configuration on top of another. A proper build order accelerates the build of the whole set of software build configurations.","tags":["Weekly Talk"],"title":"Software Build Maintenanceâ€‹: Errors and Efficiency","type":"event"},{"authors":["Ken Jin","Jules Poon"],"categories":null,"content":"","date":1699970400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699970400,"objectID":"e89cc4aa23d61db48a5221eb5c6f746b","permalink":"https://nus-test.github.io/event/231114/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231114/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Runtime Compiler Optimizations for CPython Bytecode","type":"event"},{"authors":["Anxing Zhang"],"categories":null,"content":"","date":1699275600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1699275600,"objectID":"a1ae38056a9ce7eb48758880f8ea5aed","permalink":"https://nus-test.github.io/event/231106/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231106/","section":"event","summary":"Java Database Connectivity (JDBC) drivers are software components that enable Java applications to interact with relational database systems. The numerous APIs potentially introduce significant complexity and might make JDBC drivers prone to bugs. This study holds importance as JDBC drivers have been widely used in Java applications, the reliability of JDBC drivers have large impact on the security of those applications. We propose an automated testing approach based on a state-machine model, enabling the automatic generation of test cases specifically designed to differentially test various JDBC drivers. Thus, the key conceptual challenge was to tackle the so-called test oracle and test-case generation problems. The test oracle problem is the challenge of determining the correct outcome or expected result for a given test case, while the test generation problem involves creating effective test cases to thoroughly exercise a system or software. The primary findings of this research effort include the discovery of two bugs within the DuckDB JDBC driver, which were subsequently verified and confirmed by the developers. Additionally, the study has unearthed several previously unnoticed discrepancies in the behaviors exhibited by various JDBC drivers. Overall, this dissertation introduces a pragmatic approach to testing JDBC drivers, which can help identify and address critical issues in these drivers. This research contributes to the quest for dependable database connectivity within Java applications.","tags":["group meeting"],"title":"Improving Reliability of JDBC Drivers","type":"event"},{"authors":["Suyang Zhong"],"categories":null,"content":"","date":1698069600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698069600,"objectID":"378a3bdae96196de5b18df775859fda6","permalink":"https://nus-test.github.io/event/231023/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/event/231023/","section":"event","summary":"Database Management Systems (DBMSs) are essential for efficient data storage and retrieval. To prevent bugs from being introduced, DBMS developers have implemented extensive test suites; for example, the SQLite test suites contain over 92 million lines of code. Despite these extensive efforts, test suites are not systematically reused across DBMSs, leading to wasted effort. Integration is challenging, as test suites use various test case formats and rely on unstandardized test runner features. We present a unified test suite, SQuaLity, in which we integrated test cases from three widely-used DBMSs, SQLite, PostgreSQL, and DuckDB. In addition, we present an empirical study to determine the potential of reusing these systemsâ€™ test suites. Our results indicate that reusing test suites is challenging: First, test formats and test runner commands vary widely; for example, SQLite has 4 test runner commands, while MySQL has 112 commands with additional features, to, for example, execute file operations or interact with a shell. Second, while some test suites contain mostly standard-compliant statements (e.g., 99% in SQLite), other test suites mostly test non-standardized functionality (e.g., 31% of statements in the PostgreSQL test suite are non-standardized). Third, test reuse is complicated by various explicit and implicit dependencies, such as the need to set variables and configurations, certain test cases requiring extensions not present by default, and query results depending on specific clients. Despite the above findings, we have identified 3 crashes, 3 hangs, and multiple compatibility issues across four different DBMSs by executing test suites across DBMSs, indicating the benefits of reuse. Overall, this work represents the first step towards test-case reuse in the context of DBMSs, and we believe that practitioners will benefit from SQuaLity as a practical tool.","tags":["Weekly Talk"],"title":"Reusing Test Suites Across Database Systems","type":"event"},{"authors":["Shaohua Li"],"categories":null,"content":"","date":1697464800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1697464800,"objectID":"3fb5d45a3316f888008e1b5f506bb859","permalink":"https://nus-test.github.io/event/231016/","publishdate":"2023-10-16T14:00:00Z","relpermalink":"/event/231016/","section":"event","summary":"Shaohua Li is a last-year Ph.D. student at ETH Zurich, advised by Prof. Zhendong Su. He is generally interested in fuzzing, security, and compilers. His current research focuses on detecting undefined behaviors, solidifying sanitizer implementations, and compiler testing. His research has discovered over 100 unknown bugs in mature compilers including GCC and LLVM. His research on finding sanitizer bugs has won the 2022 Meta Security Research RFP award.","tags":["Weekly Talk"],"title":"Sanitizers' Blind Spots: Invisible Undefined Behaviors","type":"event"},{"authors":["Jinsheng Ba","Manuel Rigger"],"categories":null,"content":"","date":1696896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696896000,"objectID":"8098528199761e6a7158444ad84745b5","permalink":"https://nus-test.github.io/publication/2024-icse-cert/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2024-icse-cert/","section":"publication","summary":"Database Management Systems (DBMSs) process a given query by creating an execution plan, which is subsequently executed, to compute the query's result. Deriving an efficient query plan is challenging, and both academia and industry have invested decades into researching query optimization. Despite this, DBMSs are prone to performance issues, where a DBMS produces an inefficient query plan that might lead to the slow execution of a query. Finding such issues is a longstanding problem and inherently difficult, because no ground truth information on an expected execution time exists. In this work, we propose Cardinality Estimation Restriction Testing (CERT), a novel technique that detects performance issues through the lens of cardinality estimation. Given a query on a database, CERT derives a more restrictive query (e.g., by replacing a LEFT JOIN with an INNER JOIN), whose estimated number of rows should not exceed the number of estimated rows for the original query. CERT tests cardinality estimators specifically, because they were shown to be the most important component for query optimization; thus, we expect that finding and fixing such issues might result in the highest performance gains. In addition, we found that some other kinds of query optimization issues are exposed by the unexpected cardinality estimation, which can also be detected by CERT. CERT is a black-box technique that does not require access to the source code; DBMSs expose query plans via the EXPLAIN statement. CERT eschews executing queries, which is costly and prone to performance fluctuations. We evaluated CERT on three widely used and mature DBMSs, MySQL, TiDB, and CockroachDB. CERT found 13 unique issues, of which 2 issues were fixed and 9 confirmed by the developers. We expect that this new angle on finding performance bugs will help DBMS developers in improving DMBSs' performance.","tags":null,"title":"Finding Performance Issues in Database Engines via Cardinality Estimation Testing","type":"publication"},{"authors":null,"categories":null,"content":"","date":1696896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696896000,"objectID":"c63fd5d556f584402273a2298ea71981","permalink":"https://nus-test.github.io/post/23-10-10-cert-icse24/","publishdate":"2023-10-10T00:00:00Z","relpermalink":"/post/23-10-10-cert-icse24/","section":"post","summary":"","tags":null,"title":"Our paper \"Finding Performance Issues in Database Engines via Cardinality Estimation Testing\" was accepted at ICSE'24!","type":"post"},{"authors":["Wenjing Deng"],"categories":null,"content":"","date":1696860000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696860000,"objectID":"8f14f5fb5a920795472238f9605ca933","permalink":"https://nus-test.github.io/event/231009/","publishdate":"2023-10-09T14:00:00Z","relpermalink":"/event/231009/","section":"event","summary":"We propose a testing framework for validating static typing procedures in compilers. Our core component is a program generator suitably crafted for producing programs that are likely to trigger typing compiler bugs. One of our main contributions is that our program generator gives rise to transformation-based compiler testing for finding typing bugs. We present two novel approaches (type erasure mutation and type overwriting mutation) that apply targeted transformations to an input program to reveal type inference and soundness compiler bugs respectively. Both approaches are guided by an intra-procedural type inference analysis used to capture type information flow. We implement our techniques as a tool, which we call Hephaestus. The extensibility of Hephaestus enables us to test the compilers of three popular JVM languages: Java, Kotlin, and Groovy. Within nine months of testing, we have found 156 bugs (137 confirmed and 85 fixed) with diverse manifestations and root causes in all the examined compilers. Most of the discovered bugs lie in the heart of many critical components related to static typing, such as type inference.","tags":["Weekly Talk"],"title":"Finding Typing Compiler Bugs","type":"event"},{"authors":["Qiuyang Mang"],"categories":null,"content":"","date":1696255200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696255200,"objectID":"b4049119f49d057d8193479a382519dc","permalink":"https://nus-test.github.io/event/231002/","publishdate":"2023-10-02T14:00:00Z","relpermalink":"/event/231002/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Automated Testing and Improvement of Named Entity Recognition Systems","type":"event"},{"authors":["Xinyuan Ma"],"categories":null,"content":"","date":1695045600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1695045600,"objectID":"8e9b64e139e125497be7ff6fe446e868","permalink":"https://nus-test.github.io/event/230918/","publishdate":"2023-09-18T14:00:00Z","relpermalink":"/event/230918/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Autonomous driving system defect localization","type":"event"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1694440800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1694440800,"objectID":"837e54dccffca0311e4a723483dd933e","permalink":"https://nus-test.github.io/event/230911/","publishdate":"2023-09-11T14:00:00Z","relpermalink":"/event/230911/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing Database Systems Through the Lens of Constant Folding and Constant Propagation","type":"event"},{"authors":["Ivan Ho"],"categories":null,"content":"","date":1693836000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693836000,"objectID":"acb9795497f7a0891c89932f5a806a0f","permalink":"https://nus-test.github.io/event/230904/","publishdate":"2023-09-04T14:00:00Z","relpermalink":"/event/230904/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Race Detection in CUDA Kernels","type":"event"},{"authors":[],"categories":null,"content":"","date":1693231200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693231200,"objectID":"ff68aaef2610f96fcdd24b114c737a3b","permalink":"https://nus-test.github.io/event/230828/","publishdate":"2023-08-28T14:00:00Z","relpermalink":"/event/230828/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Finding XPath Bugs in XML Processors via Differential Testing","type":"event"},{"authors":["Yuancheng Jiang","Jiahao Liu","Jinsheng Ba","Roland H.C. Yap","Zhenkai Liang","Manuel Rigger"],"categories":null,"content":"","date":1692835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692835200,"objectID":"6de57873e57b441de011fb0f3ef8d6f6","permalink":"https://nus-test.github.io/publication/2024-icse-gdbms-testing/","publishdate":"2023-08-24T00:00:00Z","relpermalink":"/publication/2024-icse-gdbms-testing/","section":"publication","summary":"","tags":null,"title":"Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Pattern Transformation","type":"publication"},{"authors":null,"categories":null,"content":"","date":1692835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692835200,"objectID":"6c9d67e6e351ee05c5787b5f43774170","permalink":"https://nus-test.github.io/post/23-08-23-icse24-gdbms-testing/","publishdate":"2023-08-24T00:00:00Z","relpermalink":"/post/23-08-23-icse24-gdbms-testing/","section":"post","summary":"","tags":null,"title":"Our paper \"Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Pattern Transformation\" was accepted at ICSE '24!","type":"post"},{"authors":["Xiu Tang"],"categories":null,"content":"","date":1692626400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692626400,"objectID":"2e7cb0a83c72ca95a1895a73a87cab5c","permalink":"https://nus-test.github.io/event/230821/","publishdate":"2023-08-21T14:00:00Z","relpermalink":"/event/230821/","section":"event","summary":"Dr. Xiu Tang is an Assistant Professor at the School of Software Engineering, Zhejiang University. She earned her Ph.D. degree in Databse from Zhejiang University in 2023. Her primary research areas encompass database query optimization and data intelligence. Her research findings have been published in top international academic conferences such as SIGMOD, VLDB, and ICDE. Furthermore, her impactful contributions have been implemented within Alibaba Cloud's PolarDB, showcasing her pioneering query optimization strategies and adeptly addressing validation intricacies in optimizer engineering. Dr. Tang has being honored with the SIGMOD 2023 Best Paper Award and the Alibaba Outstanding Research Intern distinction.","tags":["Invited Talk"],"title":"Detecting Logic Bugs of Join Optimizations in DBMS","type":"event"},{"authors":null,"categories":null,"content":"","date":1691625600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691625600,"objectID":"0306d6b05d29507c4647e45de16e21ae","permalink":"https://nus-test.github.io/post/23-08-10-deanaward-jinsheng/","publishdate":"2023-08-10T00:00:00Z","relpermalink":"/post/23-08-10-deanaward-jinsheng/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba received a \"Dean's Graduate Excellent Research Award\" from School of Computing!","type":"post"},{"authors":["Albert Zhang"],"categories":null,"content":"","date":1681743600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681743600,"objectID":"6a28dea6f6cab8bc6142305c9161469c","permalink":"https://nus-test.github.io/event/230417_2/","publishdate":"2023-04-17T15:00:00Z","relpermalink":"/event/230417_2/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Deriving Test Case Generators using Domain-Specific Language to Test Database Engine (Interim Report)","type":"event"},{"authors":["Nishita Dutta"],"categories":null,"content":"","date":1681740000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681740000,"objectID":"944d65c3f3050016459a3ff69147b0f8","permalink":"https://nus-test.github.io/event/230417/","publishdate":"2023-04-17T14:00:00Z","relpermalink":"/event/230417/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Part1: Reusing testsuites of Databases","type":"event"},{"authors":["Xudong Han"],"categories":null,"content":"","date":1681135200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681135200,"objectID":"9285888a0673b85d893257a801e1e71d","permalink":"https://nus-test.github.io/event/230410/","publishdate":"2023-04-10T14:00:00Z","relpermalink":"/event/230410/","section":"event","summary":"Xudong Han is a fourth-year Ph.D. candidate in the Natural Language Processing Group at The University of Melbourne, supervised by Prof. Trevor Cohn and Prof. Tim Baldwin. Heâ€™s working on topics concerning bias and fairness, especially in natural language processing. He received his MSc degree from The University of Melbourne and BEng degree from Shandong University (Weihai).","tags":["Invited Talk"],"title":"Measuring and Improving Fairness in NLP","type":"event"},{"authors":["Anxing Zhang"],"categories":null,"content":"","date":1680530400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680530400,"objectID":"d2686c666dda7f5d174ff59ea5f79788","permalink":"https://nus-test.github.io/event/230403/","publishdate":"2023-04-03T14:00:00Z","relpermalink":"/event/230403/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing JDBC drivers","type":"event"},{"authors":["Yuancheng Jiang"],"categories":null,"content":"","date":1679320800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1679320800,"objectID":"d1ac5de9bc28495a221ee626318effdd","permalink":"https://nus-test.github.io/event/230320/","publishdate":"2023-03-20T14:00:00Z","relpermalink":"/event/230320/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Testing Graph Databases","type":"event"},{"authors":["Shuxin Li"],"categories":null,"content":"","date":1678716000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678716000,"objectID":"dd36f151927f20f3abdf47b41da09a78","permalink":"https://nus-test.github.io/event/230313/","publishdate":"2023-03-13T14:00:00Z","relpermalink":"/event/230313/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Automated Testing for XPath Query Processors","type":"event"},{"authors":[],"categories":[],"content":"SQLancer automatically finds bugs in database systems.\n","date":1678466463,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678466463,"objectID":"33582b31a80d8bcf969c6da0910f0731","permalink":"https://nus-test.github.io/project/sqlancer/","publishdate":"2023-03-11T00:41:03+08:00","relpermalink":"/project/sqlancer/","section":"project","summary":"SQLancer automatically finds bugs in database systems.","tags":[],"title":"SQLancer","type":"project"},{"authors":["Suyang Zhong"],"categories":null,"content":"","date":1678111200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678111200,"objectID":"c8990f98ef0862fa9634e4876884c614","permalink":"https://nus-test.github.io/event/230306/","publishdate":"2023-03-06T14:00:00Z","relpermalink":"/event/230306/","section":"event","summary":"The aspect-opinion extraction tasks extract aspect terms and opinion terms from reviews. The supervised extraction methods achieve state-of-the-art performance but require large-scale human-annotated training data. Thus, they are restricted for open-domain tasks due to the lack of training data. This work addresses this challenge and simultaneously mines aspect terms, opinion terms, and their correspondence in a joint model. We propose an Open-Domain Aspect-Opinion Co-Mining (ODAO) method with a Double-Layer span extraction framework. Instead of acquiring human annotations, ODAO first generates weak labels for unannotated corpus by employing rules-based on universal dependency parsing. Then, ODAO utilizes this weak supervision to train a double-layer span extraction framework to extract aspect terms (ATE), opinion terms (OTE), and aspect-opinion pairs (AOPE). ODAO applies canonical correlation analysis as an early stopping indicator to avoid the model over-fitting to the noise to tackle the noisy weak supervision. ODAO applies a self-training process to gradually enrich the training data to tackle the weak supervision bias issue. We conduct extensive experiments and demonstrate the power of the proposed ODAO. The results on four benchmark datasets for aspect-opinion co-extraction and pair extraction tasks show that ODAO can achieve competitive or even better performance compared with the state-of-the-art fully supervised methods.","tags":["Weekly Talk"],"title":"Open-Domain Aspect-Opinion Co-Mining with Double-Layer Span Extraction","type":"event"},{"authors":["Qiyuan Zhao"],"categories":null,"content":"","date":1677506400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677506400,"objectID":"cf6a2ac1f53899783b37325365c25146","permalink":"https://nus-test.github.io/event/230227/","publishdate":"2023-02-27T14:00:00Z","relpermalink":"/event/230227/","section":"event","summary":"Combinatorial interaction testing (CIT) is an effective paradigm for testing highly configurable systems, and its goal is to generate a t-wise covering array (CA) as a test suite, where t is the strength of testing. It is recognized that pairwise testing (i.e., CIT with t=2) is the most common CIT technique, and has high fault detection capability in practice. The problem of pairwise CA generation (PCAG), which is a core problem in pairwise testing, aims at generating a pairwise CA (i.e., 2-wise CA) of minimum size, subject to hard constraints. The PCAG problem is a hard combinatorial optimization problem, which urgently requires practical methods for generating pairwise CAs (PCAs) of small sizes. However, existing PCAG algorithms suffer from the severe scalability issue; that is, when solving large-scale PCAG instances, existing state-of-the-art PCAG algorithms usually cost a fairly long time to generate large PCAs, which would make the testing of highly configurable systems both ineffective and inefficient. In this paper, we propose a novel and effective sampling-based approach dubbed SamplingCA for solving the PCAG problem. SamplingCA first utilizes sampling techniques to obtain a small test suite that covers valid pairwise tuples as many as possible, and then adds a few more test cases into the test suite to ensure that all valid pairwise tuples are covered. Extensive experiments on 125 public PCAG instances show that our approach can generate much smaller PCAs than its state-of-the-art competitors, indicating the effectiveness of SamplingCA. Also, our experiments show that SamplingCA runs one to two orders of magnitude faster than its competitors, demonstrating the efficiency of SamplingCA. Our results confirm that SamplingCA is able to address the scalability issue and considerably pushes forward the state of the art in PCAG solving.","tags":["Weekly Talk"],"title":"SamplingCA: Effective and Efficient Sampling-Based Pairwise Testing for Highly Configurable Software Systems","type":"event"},{"authors":null,"categories":null,"content":"","date":1677110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677110400,"objectID":"b585acf372dbadd8873cf600ed78b7b0","permalink":"https://nus-test.github.io/post/23-02-23-distinguishedaward-icse23/","publishdate":"2023-02-23T00:00:00Z","relpermalink":"/post/23-02-23-distinguishedaward-icse23/","section":"post","summary":"","tags":null,"title":"Our paper \"Testing Database Engines via Query Plan Guidance\" received \"ACM SIGSOFT Distinguished Paper Award\" at ICSE'23!","type":"post"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1676901600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676901600,"objectID":"4bcaa25d8a60bb97e1c3a4acef0d1911","permalink":"https://nus-test.github.io/event/230220/","publishdate":"2023-02-20T14:00:00Z","relpermalink":"/event/230220/","section":"event","summary":"","tags":["Weekly Talk"],"title":"Finding Optimization Bugs in Datalog Engines","type":"event"},{"authors":["Albert Zhang"],"categories":null,"content":"","date":1676293200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676293200,"objectID":"15096ab7fc7dde9b52937ae5d6b39242","permalink":"https://nus-test.github.io/event/230213/","publishdate":"2023-02-13T13:00:00Z","relpermalink":"/event/230213/","section":"event","summary":"","tags":["Weekly Talk"],"title":"General SQL Grammar for Testing Case Generation","type":"event"},{"authors":["Jinsheng Ba"],"categories":null,"content":"","date":1675688400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1675688400,"objectID":"83db2006d1013b61e24c8759837180d3","permalink":"https://nus-test.github.io/event/230206/","publishdate":"2023-02-06T13:00:00Z","relpermalink":"/event/230206/","section":"event","summary":"Database Management Systems (DBMSs) process a given query by creating an execution plan, which is subsequently executed, to compute the query's result. Deriving an efficient query plan is challenging, and both academia and industry have invested decades into researching query optimization. Despite this, DBMSs are prone to performance issues, where a DBMS produces an inefficient query plan that might lead to the slow execution of a query. Finding such issues is a longstanding problem and inherently difficult, because no ground truth information on an expected execution time exists. In this work, we propose Cardinality Estimation Restriction Testing (CERT), a novel technique that detects performance issues through the lens of cardinality estimation. Given a query on a database, CERT derives a more restrictive query (e.g., by replacing a LEFT JOIN with an INNER JOIN), whose estimated number of rows should not exceed the number of estimated rows for the original query. CERT tests cardinality estimators specifically, because they were shown to be the most important component for query optimization; thus, we expect that finding and fixing such issues might result in the highest performance gains. In addition, we found that some other kinds of query optimization issues are exposed by the unexpected cardinality estimation, which can also be detected by CERT. CERT is a black-box technique that does not require access to the source code; DBMSs expose query plans via the EXPLAIN statement. CERT eschews executing queries, which is costly and prone to performance fluctuations. We evaluated CERT on three widely used and mature DBMSs, MySQL, TiDB, and CockroachDB. CERT found 13 unique issues, of which 2 issues were fixed and 9 confirmed by the developers. We expect that this new angle on finding performance bugs will help DBMS developers in improving DMBSs' performance.","tags":["Weekly Talk"],"title":"Cardinality Estimation Testing","type":"event"},{"authors":null,"categories":null,"content":"","date":1672876800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672876800,"objectID":"3d5b9eaa0f8b340803c484e9a1c0ad81","permalink":"https://nus-test.github.io/post/23-01-05-researchaward-jinsheng/","publishdate":"2023-01-05T00:00:00Z","relpermalink":"/post/23-01-05-researchaward-jinsheng/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba received a \"Research Achievement Award\" from School of Computing!","type":"post"},{"authors":null,"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"6689cfd9f4ecef2ebf0beda866702603","permalink":"https://nus-test.github.io/post/22-12-09-qpg-icse23/","publishdate":"2022-12-09T00:00:00Z","relpermalink":"/post/22-12-09-qpg-icse23/","section":"post","summary":"","tags":null,"title":"Our paper \"Testing Database Engines via Query Plan Guidance\" was accepted at ICSE'23!","type":"post"},{"authors":["Jinsheng Ba","Manuel Rigger"],"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"ff85067ccb75b9add56fa65f371f35bb","permalink":"https://nus-test.github.io/publication/2023-icse-qpg/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2023-icse-qpg/","section":"publication","summary":"Database systems are widely used to store and query data. Test oracles have been proposed to find logic bugs in such systems, that is, bugs that cause the database system to compute an incorrect result. To realize a fully automated testing approach, such test oracles are paired with a test case generation technique; a test case refers to a database state and a query on which the test oracle can be applied. In this work, we propose the concept of Query Plan Guidance (QPG) for guiding automated testing towards \"interesting\" test cases. SQL and other query languages are declarative. Thus, to execute a query, the database system translates every operator in the source language to one of potentially many so-called physical operators that can be executed; the tree of physical operators is referred to as the query plan. Our intuition is that by steering testing towards exploring diverse query plans, we also explore more interesting behaviorsâ€”some of which are potentially incorrect. To this end, we propose a mutation technique that gradually applies promising mutations to the database state, causing the DBMS to create diverse query plans for subsequent queries. We applied our method to three mature, widely-used, and extensively-tested database systemsâ€”SQLite, TiDB, and CockroachDBâ€”and found 53 unique, previously unknown bugs. Our method exercises 4.85â€”408.48Ã— more unique query plans than a naive random generation method and 7.46Ã— more than a code coverage guidance method. Since most database systemsâ€”including commercial onesâ€”expose query plans to the user, we consider QPG a generally applicable, black-box approach and believe that the core idea could also be applied in other contexts (e.g., to measure the quality of a test suite).","tags":null,"title":"Testing Database Engines via Query Plan Guidance","type":"publication"},{"authors":["Matteo Kamm","Manuel Rigger","Chengyu Zhang","Zhendong Su"],"categories":null,"content":"","date":1670544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670544000,"objectID":"c33260c2c9eac0e9ce2084d526f8229a","permalink":"https://nus-test.github.io/publication/2023-issta-gdbmeter/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2023-issta-gdbmeter/","section":"publication","summary":"Graph Database Management Systems (GDBMSs) store data as graphs and allow the efficient querying of nodes and their relationships. Logic bugs are bugs that cause a GDBMS to return an incorrect result for a given query (e.g., by returning incorrect nodes or relationships). The impact of such bugs can be severe, as they often go unnoticed. The core insight of this paper is that Query Partitioning, a test oracle that has been proposed to test Relational Database Systems, is applicable to testing GDBMSs as well. The core idea of Query Partitioning is that, given a query, multiple queries are derived whose results can be combined to reconstruct the given queryâ€™s result. Any discrepancy in the result indicates a logic bug. We have implemented this approach as a practical tool named GDBMeter and evaluated GDBMeter on three popular GDBMSs and found a total of 41 unique, previously unknown bugs. We consider 14 of them to be logic bugs, the others being error or crash bugs. Overall, 27 of the bugs have been fixed, and 35 confirmed. We compared our approach to the state-of-the-art approach to testing GDBMS, which relies on differential testing; we found that it results in a high number of false alarms, while Query Partitioning reported actual logic bugs without any false alarms. Furthermore, despite the previous efforts in testing Neo4j and JanusGraph, we found 13 additional bugs. The developers appreciate our work and plan to integrate GDBMeter into their testing process. We expect that this simple, yet effective approach and the practical tool will be used to test other GDBMSs.","tags":null,"title":"Testing Graph Database Engines via Query Partitioning","type":"publication"},{"authors":null,"categories":null,"content":"See https://nus-plse.github.io/seminars.html.\n","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"1ba9d4a71ddb9c74be3faf4d4f0b4915","permalink":"https://nus-test.github.io/post/22-10-03-chi-plse-talk/","publishdate":"2022-10-03T00:00:00Z","relpermalink":"/post/22-10-03-chi-plse-talk/","section":"post","summary":"See https://nus-plse.github.io/seminars.html.","tags":null,"title":"Chi will give a talk on \"Infrared: A Meta Bug Detector\" in the PLSE seminar this week.","type":"post"},{"authors":["Philippe Voinov","Manuel Rigger","Zhendong Su"],"categories":null,"content":"","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"6dba1463fe05703a1705ea6cbda2523e","permalink":"https://nus-test.github.io/publication/2022-onward-forest/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2022-onward-forest/","section":"publication","summary":"Software developers frequently refactor code. Often, a single logical refactoring change involves changing multiple related components in a source base such as renaming each occurrence of a variable or function. While many code editors can perform such common and generic refactorings, they do not support more complex refactorings or those that are specific to a given code base. For those, as a flexible â€” albeit less interactive â€” alternative, developers can write refactoring scripts that can implement arbitrarily complex logic by manipulating the program's tree representation. In this work, we present Forest, a structural code editor that aims to bridge the gap between the interactiveness of code editors and the expressiveness of refactoring scripts. While structural editors have occupied a niche as general code editors, the key insight of this work is that they enable a novel structural multi-cursor design that allows Forest to reach a similar expressiveness as refactoring scripts; Forest allows to perform a single action simultaneously in multiple program locations and thus support complex refactorings. To support interactivity, Forest provides features typical for text code editors such as writing and displaying the program through its textual representation. Our evaluation demonstrates that Forest allows performing edits similar to those from refactoring scripts, while still being interactive. We attempted to perform edits from 48 real-world refactoring scripts using Forest and found that 11 were possible, while another 17 would be possible with added features. We believe that a multi-cursor setting plays to the strengths of structural editing, since it benefits from reliable and expressive. Our results suggest that multi-cursor structural editors could be practical for performing small-scale specialized refactorings.","tags":null,"title":"Forest: Structural Code Editing with Multiple Cursors","type":"publication"},{"authors":["Manuel Rigger","Zhendong Su"],"categories":null,"content":"","date":1664755200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664755200,"objectID":"eca017828c70a5a478ad171c1351cdd5","permalink":"https://nus-test.github.io/publication/2022-onward-intramorphic/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2022-onward-intramorphic/","section":"publication","summary":"A test oracle determines whether a system behaves correctly for a given input. Automatic testing techniques rely on an automated test oracle to test the system without user interaction. Important families of automated test oracles include Differential Testing and Metamorphic Testing, which are both black-box approaches; that is, they provide a test oracle that is oblivious to the systemâ€™s internals. In this work, we propose Intramorphic Testing, which is a new methodology to tackle the test oracle problem. To realize an Intramorphic Testing testing approach, a modified version of the system is created, for which, given a single input, a test oracle can be provided that relates the output of the original and modified systems. As a concrete example, by replacing a greater-equals operator in the implementation of a sorting algorithm with smaller-equals, it would be expected that the output of the modified implementation is the reverse output of the original implementation. In this paper, we introduce the methodology and illustrate it via a set of use cases.","tags":null,"title":"Intramorphic Testing: A New Approach to the Test Oracle Problem","type":"publication"},{"authors":["Chi Zhang"],"categories":null,"content":"","date":1664456400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664456400,"objectID":"dbf47428c37f559a48bc2d2ca53199c9","permalink":"https://nus-test.github.io/event/220929/","publishdate":"2022-09-29T13:00:00Z","relpermalink":"/event/220929/","section":"event","summary":"The recent breakthroughs in deep learning methods have sparked a wave of interest in learning-based bug detectors. Compared to the traditional static analysis tools, these bug detectors are directly learned from data, thus, easier to create. On the other hand, they are difficult to train, requiring a large amount of data which is not readily available. In this paper, we propose a new approach, called meta bug detection, which offers three crucial advantages over existing learning-based bug detectors: bug-type generic (i.e., capable of catching the types of bugs that are totally unobserved during training), self-explainable (i.e., capable of explaining its own prediction without any external interpretability methods) and sample efficient (i.e., requiring substantially less training data than standard bug detectors). Our extensive evaluation shows our meta bug detector (MBD) is effective in catching a variety of bugs including null pointer dereference, array index out-of-bound, file handle leak, and even data races in concurrent programs; in the process MBD also significantly outperforms several noteworthy baselines including Facebook Infer, a prominent static analysis tool, and FICS, the latest anomaly detection method.","tags":["group meeting"],"title":"Infrared: A Meta Bug Detector","type":"event"},{"authors":["Jinsheng Ba"],"categories":null,"content":"","date":1663246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663246800,"objectID":"1c7749c904bb50b317c36b8adc27d0fa","permalink":"https://nus-test.github.io/event/220915/","publishdate":"2022-09-15T13:00:00Z","relpermalink":"/event/220915/","section":"event","summary":"Greybox fuzzing is a proven effective testing method for the detection of security vulnerabilities and other bugs in modern software systems. Greybox fuzzing can also be used in combination with a sanitizer, such as AddressSanitizer (ASAN), to further enhance the detection of certain classes of bug such as buffer overflow and use-after-free errors. However, sanitizers also introduce additional performance overheads, and this can degrade the performance of greybox fuzzing---measured in the order of 2.36x for fuzzing with ASAN---potentially negating the benefit of using a sanitizer in the first place. Recent research attributes this to extra overheads to additional page faults that are generated when the disjoint sanitizer metadata is accessed at runtime.\nIn this paper, we present a new design that can detect memory errors without a proliferation of page faults. The basic idea is to track memory validity using randomized tokens that are stored directly in the memory itself, rather than in disjoint metadata. All read/write operations are instrumented to check for the token, and if present, a memory error will be detected. We implement our design in the form of the ReZZan---a sanitizer specifically optimized for fuzz testing. Since there is no disjoint metadata access, no additional page faults are generated, minimizing the performance overhead to around 1.14-1.27x (depending on the configuration).","tags":["group meeting"],"title":"Efficient Fuzzing to Detect Memory Errors","type":"event"},{"authors":null,"categories":null,"content":"Check out his website at https://ch1zhang.github.io/.\n","date":1661385600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661385600,"objectID":"14108c62211665cd9d1c9a0bb445b1c1","permalink":"https://nus-test.github.io/post/22-08-25-chi/","publishdate":"2022-08-25T00:00:00Z","relpermalink":"/post/22-08-25-chi/","section":"post","summary":"Check out his website at https://ch1zhang.github.io/.","tags":null,"title":"Chi Zhang, a PhD student at Nanjing University, is visiting the lab for one year. Welcome!","type":"post"},{"authors":null,"categories":null,"content":"See APAC Modern Data Stack (MDS) Meetup Group.\n","date":1661385600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661385600,"objectID":"2e7126f9a53bef16c102cbb8486e5108","permalink":"https://nus-test.github.io/post/22-08-25-singularity/","publishdate":"2022-08-25T00:00:00Z","relpermalink":"/post/22-08-25-singularity/","section":"post","summary":"See APAC Modern Data Stack (MDS) Meetup Group.","tags":null,"title":"Manuel gave a presentation on SQLancer at the APAC Modern Data Stack (MDS) Meetup Group.","type":"post"},{"authors":null,"categories":null,"content":"","date":1659312000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659312000,"objectID":"29132b609c3a87a61cbdf3f59062110e","permalink":"https://nus-test.github.io/post/22-08-01-jinsheng-suyang/","publishdate":"2022-08-01T00:00:00Z","relpermalink":"/post/22-08-01-jinsheng-suyang/","section":"post","summary":"","tags":null,"title":"Jinsheng Ba and Suyang Zhong officially joined the NUS TEST lab. Welcome!","type":"post"},{"authors":null,"categories":null,"content":"More information about the module is provided on the Canvas page.\n","date":1659312000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659312000,"objectID":"b1816de078f785c6606670158b438b75","permalink":"https://nus-test.github.io/post/22-08-01-cs6218/","publishdate":"2022-08-01T00:00:00Z","relpermalink":"/post/22-08-01-cs6218/","section":"post","summary":"More information about the module is provided on the Canvas page.","tags":null,"title":"We will offer module CS6218 on \"Ensuring the Correctness and Reliability of Data-Centric Systems\" next semester.","type":"post"},{"authors":null,"categories":null,"content":"Manuel presented his experience interviewing for faculty positions at a seminar and panel discussion to PhD students and postdocs at the School of Computing at NUS.\n","date":1632700800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632700800,"objectID":"9dcde8b3e167a16375cd25ad19dff2c4","permalink":"https://nus-test.github.io/post/21-09-27-nus-academic-job-experience-talk/","publishdate":"2021-09-27T00:00:00Z","relpermalink":"/post/21-09-27-nus-academic-job-experience-talk/","section":"post","summary":"Manuel presented his experience interviewing for faculty positions at a seminar and panel discussion to PhD students and postdocs at the School of Computing at NUS.","tags":null,"title":"Manuel shared his experience on the academic job market at a seminar and panel discussion at NUS","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://nus-test.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://nus-test.github.io/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c1d17ff2b20dca0ad6653a3161942b64","permalink":"https://nus-test.github.io/people/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/people/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]